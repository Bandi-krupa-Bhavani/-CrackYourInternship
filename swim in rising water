class Solution {
    public int swimInWater(int[][] grid) {
        int n=grid.length;
        boolean[][] visited=new boolean[n][n];
        PriorityQueue<int[]> pq=new PriorityQueue<>((a,b)->a[2]-b[2]);
        pq.offer(new int[]{0,0,grid[0][0]});
        int[][] directions={{0,1},{1,0},{0,-1},{-1,0}};
        while(!pq.isEmpty()){
            int[] current=pq.poll();
            int x=current[0],y=current[1],time=current[2];
            if(x==n-1&&y==n-1) return time;
            if(visited[x][y]) continue;
            visited[x][y] =true;
            for(int[] dir:directions){
                int nx=x+dir[0],ny=y+dir[1];
                if(nx>=0&&ny>=0&&nx<n&&ny<n&&!visited[nx][ny]){
                    pq.offer(new int[]{nx,ny,Math.max(time,grid[nx][ny])});
                }
            }
        }
        return -1;
    }
}
