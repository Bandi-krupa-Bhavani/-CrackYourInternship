class Solution {
    public int snakesAndLadders(int[][] board) {
        int n=board.length;
        int[] moves=new int[n*n+1];
        boolean leftToRight=true;
        int idx=1;
        for(int i=n-1;i>=0;i--){
            if(leftToRight){
                for(int j=0;j<n;j++){
                    moves[idx++]=board[i][j];
                }
            }else{
                for(int j=n-1;j>=0;j--){
                    moves[idx++]=board[i][j];
                }
            }
            leftToRight=!leftToRight;
        }
        Queue<Integer> queue=new LinkedList<>();
        boolean[] visited=new boolean[n*n+1];
        queue.offer(1);
        visited[1]=true;
        int steps=0;
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                int curr=queue.poll();
                if(curr==n*n) return steps;
                for(int d=1;d<=6;d++){
                    int next=curr+d;
                    if(next>n*n) break;
                    if(moves[next]!=-1) next=moves[next];
                    if(!visited[next]){
                        visited[next]=true;
                        queue.offer(next);
                    }
                }
            }
            steps++;
        }
        return -1;
    }
}
