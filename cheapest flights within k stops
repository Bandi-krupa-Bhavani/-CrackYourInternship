class Solution {
    public int findCheapestPrice(int n, int[][] flights, int src, int dst, int k) {
        Map<Integer,List<int[]>> graph=new HashMap<>();
        for(int[] flight:flights){
            graph.putIfAbsent(flight[0],new ArrayList<>());
            graph.get(flight[0]).add(new int[]{flight[1],flight[2]});
        }
        Queue<int[]> queue=new LinkedList<>();
        queue.offer(new int[]{src,0,0});
        int[] prices=new int[n];
        Arrays.fill(prices,Integer.MAX_VALUE);
        prices[src]=0;
        while(!queue.isEmpty()){
            int[] current=queue.poll();
            int city=current[0],cost=current[1],stops=current[2];
            if(stops>k) continue;
            if(graph.containsKey(city)){
                for(int[] neighbor:graph.get(city)){
                    int nextCity=neighbor[0],price=neighbor[1];
                    if(cost+price<prices[nextCity]){
                        prices[nextCity]=cost+price;
                        queue.offer(new int[]{nextCity,cost+price,stops+1});
                    }
                }
            }
        }
        return prices[dst]==Integer.MAX_VALUE?-1:prices[dst];
    }
}
