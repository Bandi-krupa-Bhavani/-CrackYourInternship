class Solution {
    public int makeConnected(int n, int[][] connections) {
        if(connections.length<n-1) return -1;
        List<List<Integer>> graph=new ArrayList<>();
        for(int i=0;i<n;i++){
            graph.add(new ArrayList<>());
        }
        for(int[] connection:connections){
            graph.get(connection[0]).add(connection[1]);
            graph.get(connection[1]).add(connection[0]);
        }
        boolean[] visited=new boolean[n];
        int components=0;
        for(int i=0;i<n;i++){
            if(!visited[i]){
                components++;
                dfs(i,graph,visited);
            }
        }
        return components-1;
    }
    private void dfs(int node,List<List<Integer>> graph,boolean[] visited){
        visited[node]=true;
        for(int neighbor:graph.get(node)){
            if(!visited[neighbor]){
                dfs(neighbor,graph,visited);
            }
        }
    }
    public static void main(String[] args){
        Solution c=new Solution();
        System.out.println(c.makeConnected(4,new int[][]{{0,1},{0,2},{1,2}}));
        System.out.println(c.makeConnected(6,new int[][]{{0,1},{0,1},{0,3},{1,2},{1,3}}));
        System.out.println(c.makeConnected(6,new int[][]{{0,1},{0,2},{0,3},{1,2}}));
    }
}
