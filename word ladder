class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> wordSet=new HashSet<>(wordList);
        if(!wordSet.contains(endWord)) return 0;
        Queue<String> queue=new LinkedList<>();
        queue.add(beginWord);
        int steps=1;
        while(!queue.isEmpty()){
            int size=queue.size();
            for(int i=0;i<size;i++){
                String currentWord=queue.poll();
                char[] wordChars=currentWord.toCharArray();
                for(int j=0;j<wordChars.length;j++){
                    char originalChar=wordChars[j];
                    for(char c='a';c<='z';c++){
                        wordChars[j]=c;
                        String newWord=new String(wordChars);
                        if(newWord.equals(endWord)) return steps+1;
                        if(wordSet.contains(newWord)){
                            queue.add(newWord);
                            wordSet.remove(newWord);
                        }
                    }
                    wordChars[j]=originalChar;
                }
            }
            steps++;
        }
        return 0;
    }
}
