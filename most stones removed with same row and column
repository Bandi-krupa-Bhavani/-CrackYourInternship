class Solution {
    public int removeStones(int[][] stones) {
        Map<Integer,List<Integer>> rowMap=new HashMap<>();
        Map<Integer,List<Integer>> colMap=new HashMap<>();
        for(int i=0;i<stones.length;i++){
            rowMap.computeIfAbsent(stones[i][0],x->new ArrayList<>()).add(i);
            colMap.computeIfAbsent(stones[i][1],x-> new ArrayList<>()).add(i);
        }
        boolean[] visited=new boolean[stones.length];
        int components=0;
        for(int i=0;i<stones.length;i++){
            if(!visited[i]){
                components++;
                dfs(i,stones,visited,rowMap,colMap);
            }
        }
        return stones.length-components;
    }
    private void dfs(int index,int[][] stones,boolean[] visited,Map<Integer,List<Integer>> rowMap,Map<Integer,List<Integer>> colMap){
        visited[index]=true;
        for(int neighbor:rowMap.get(stones[index][0])){
            if(!visited[neighbor]) dfs(neighbor,stones,visited,rowMap,colMap);
        }
        for(int neighbor:colMap.get(stones[index][1])){
            if(!visited[neighbor]) dfs(neighbor,stones,visited,rowMap,colMap);
        }
    }
    public static void main(String[] args){
        Solution s=new Solution();
        System.out.println(s.removeStones(new int[][]{{0,0},{0,1},{1,0},{1,2},{2,1},{2,2}}));
        System.out.println(s.removeStones(new int[][]{{0,0},{0,2},{1,1},{2,0},{2,2}}));
        System.out.println(s.removeStones(new int[][]{{0,0}}));
    }
}
