class Solution {
    public double[] calcEquation(List<List<String>> equations, double[] values, List<List<String>> queries) {
        Map<String,Map<String,Double>> graph=new HashMap<>();
        for(int i=0;i<equations.size();i++){
            String a=equations.get(i).get(0);
            String b=equations.get(i).get(1);
            double value=values[i];
            graph.putIfAbsent(a,new HashMap<>());
            graph.putIfAbsent(b,new HashMap<>());
            graph.get(a).put(b,value);
            graph.get(b).put(a,1/value);
        }
        double[] result=new double[queries.size()];
        for(int i=0;i<queries.size();i++){
            String c=queries.get(i).get(0);
            String d=queries.get(i).get(1);
            result[i]=dfs(c,d,graph,new HashSet<>());
        }
        return result;
    }
    private double dfs(String src,String dest,Map<String,Map<String,Double>> graph,Set<String> visited){
        if(!graph.containsKey(src)||!graph.containsKey(dest)) return -1.0;
        if(src.equals(dest)) return 1.0;
        visited.add(src);
        for(Map.Entry<String,Double> neighbor:graph.get(src).entrySet()){
            if(!visited.contains(neighbor.getKey())){
                double product=dfs(neighbor.getKey(),dest,graph,visited);
                if(product!=-1.0) return product*neighbor.getValue();
            }
        }
        return -1.0;
    }
}
