class Solution {
    private final int[] dirs = {-1, 0, 1, 0, -1};

    public int largestIsland(int[][] grid) {
        int n = grid.length;
        int[][] area = new int[n][n];
        Map<Integer, Integer> areaMap = new HashMap<>();
        int maxArea = 0;
        int id = 2;

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1 && area[i][j] == 0) {
                    int currentArea = dfs(grid, area, i, j, id);
                    areaMap.put(id, currentArea);
                    maxArea = Math.max(maxArea, currentArea);
                    id++;
                }
            }
        }

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 0) {
                    int newArea = 1; 
                    Set<Integer> seen = new HashSet<>();
                    for (int k = 0; k < 4; k++) {
                        int ni = i + dirs[k];
                        int nj = j + dirs[k + 1];
                        if (ni >= 0 && ni < n && nj >= 0 && nj < n && area[ni][nj] > 0) {
                            int islandId = area[ni][nj];
                            if (!seen.contains(islandId)) {
                                newArea += areaMap.get(islandId);
                                seen.add(islandId);
                            }
                        }
                    }
                    maxArea = Math.max(maxArea, newArea);
                }
            }
        }

        return maxArea;
    }

    private int dfs(int[][] grid, int[][] area, int i, int j, int id) {
        int n = grid.length;
        int currentArea = 1;
        area[i][j] = id;

        for (int k = 0; k < 4; k++) {
            int ni = i + dirs[k];
            int nj = j + dirs[k + 1];
            if (ni >= 0 && ni < n && nj >= 0 && nj < n && grid[ni][nj] == 1 && area[ni][nj] == 0) {
                currentArea += dfs(grid, area, ni, nj, id);
            }
        }

        return currentArea;
    }
}
