class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n=graph.length;
        List<List<Integer>> reverseGraph=new ArrayList<>();
        for(int i=0;i<n;i++){
            reverseGraph.add(new ArrayList<>());
        }
        int[] outDegree=new int[n];
        for(int i=0;i<n;i++){
            for(int neighbor:graph[i]){
                reverseGraph.get(neighbor).add(i);
                outDegree[i]++;
            }
        }
        Queue <Integer> queue=new LinkedList<>();
        for(int i=0;i<n;i++){
            if(outDegree[i]==0){
                queue.add(i);
            }
        }
        List<Integer> safeNodes=new ArrayList<>();
        while(!queue.isEmpty()){
            int node=queue.poll();
            safeNodes.add(node);
            for(int neighbor:reverseGraph.get(node)){
                outDegree[neighbor]--;
                if(outDegree[neighbor]==0){
                    queue.add(neighbor);
                }
            }
        }
        Collections.sort(safeNodes);
        return safeNodes;
    }
    public static void main(String[] args){
        Solution sn=new Solution();
        System.out.println(sn.eventualSafeNodes(new int[][]{{1,2},{2,3},{5},{0},{5},{},{}}));
        System.out.println(sn.eventualSafeNodes(new int[][]{{1,2,3,4},{1,2},{3,4},{0,4},{}}));

    }
}
