class Solution {
    public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
       List<List<Integer>> tree =new ArrayList<>();
       for(int i=0;i<n;i++){
        tree.add(new ArrayList<>());
       } 
       for(int i=0;i<n;i++){
        if(manager[i]!=-1){
            tree.get(manager[i]).add(i);
        }
       }
       return dfs(headID,tree,informTime);
    }
    private int dfs(int current,List<List<Integer>> tree,int[] informTime){
        int maxTime=0;
        for(int subordinate:tree.get(current)){
            maxTime=Math.max(maxTime,dfs(subordinate,tree,informTime));
        }
        return maxTime+informTime[current];
    }
    public static void main(String[] args){
        Solution s=new Solution();
        System.out.println(s.numOfMinutes(1,0,new int[]{-1},new int[]{0}));
        System.out.println(s.numOfMinutes(6,2,new int[]{2,2,-1,2,2,2},new int[]{0,0,1,0,0,0}));
    }
}
