/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<Integer> distanceK(TreeNode root, TreeNode target, int k) {
        Map<TreeNode,TreeNode>parentMap=new HashMap<>();
        List<Integer> result= new ArrayList<>();
        buildParentMap(root,null,parentMap);
        Set<TreeNode> visited=new HashSet<>();
        Queue<TreeNode> queue=new LinkedList<>();
        queue.offer(target);
        visited.add(target);
        int distance=0;
        while(!queue.isEmpty()){
            if(distance==k){
                for(TreeNode node:queue) result.add(node.val);
                return result;
            }
            int size=queue.size();
            for(int i=0;i<size;i++){
                TreeNode node=queue.poll();
                if(node.left!=null&&visited.add(node.left)) queue.offer(node.left);
                if(node.right!=null&&visited.add(node.right)) queue.offer(node.right);
                TreeNode parent=parentMap.get(node);
                if(parent!=null&&visited.add(parent)) queue.offer(parent);
            }
            distance++;
        }
        return result;
    }
    private void buildParentMap(TreeNode node,TreeNode parent,Map<TreeNode,TreeNode>parentMap){
        if(node==null) return;
        parentMap.put(node,parent);
        buildParentMap(node.left,node,parentMap);
        buildParentMap(node.right,node,parentMap);
    }
}
