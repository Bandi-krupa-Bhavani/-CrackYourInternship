/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> verticalTraversal(TreeNode root) {
        TreeMap<Integer,TreeMap<Integer,PriorityQueue<Integer>>> map=new TreeMap<>();
        dfs(root,0,0,map);
        List<List<Integer>> result=new ArrayList<>();
        for(TreeMap<Integer,PriorityQueue<Integer>> ys:map.values()){
            List<Integer> col=new ArrayList<>();
            for(PriorityQueue<Integer> nodes:ys.values()){
                while(!nodes.isEmpty()) col.add(nodes.poll());
            }
            result.add(col);
        }
        return result;
    }
    private void dfs(TreeNode node,int x,int y,TreeMap<Integer,TreeMap<Integer,PriorityQueue<Integer>>> map){
        if(node==null) return;
        map.computeIfAbsent(x,k->new TreeMap<>()).computeIfAbsent(y,k->new PriorityQueue<>()).add(node.val);
        dfs(node.left,x-1,y+1,map);
        dfs(node.right,x+1,y+1,map);
    }
}
