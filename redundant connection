class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        int n=edges.length;
        int[] parent=new int[n+1];
        for(int i=0;i<=n;i++){
            parent[i]=i;
        }
        for(int[] edge:edges){
            int u=edge[0];
            int v=edge[1];
            if(find(u,parent)==find(v,parent)){
                return edge;
            }
            union(u,v,parent);
        }
        return new int[2];
    }
    private int find(int u,int[] parent){
        if(parent[u]!=u){
            parent[u]=find(parent[u],parent);
        }
        return parent[u];
    }
    private void union(int u,int v,int[] parent){
        int rootU=find(u,parent);
        int rootV=find(v,parent);
        if(rootU!=rootV){
            parent[rootU]=rootV;
        }
    }
}
